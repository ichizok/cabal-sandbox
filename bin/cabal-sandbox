#!/usr/bin/env bash

declare -x SANDBOX_LOCAL
declare -x SANDBOX_HOME="${SANDBOX_HOME:-$HOME/.cabal-sandbox}"
declare -r LAUNCHER="${LAUNCHER:-cabal-sandbox}"
declare -r COMMAND="$(basename $0)"
declare -r ERRCODE=127

_msg() {
    echo "$LAUNCHER: $@"
}

_err() {
    echo "$LAUNCHER: $@" >&2
}

usage() {
    cat <<EOT >&2
Usage: ${COMMAND} [--sandbox dir] detect|register
   or: ${COMMAND} [--sandbox dir] -- command [...]
EOT
}

check_path() {
    local sandbox="$1"
    [[ -d "$sandbox" ]] && [[ $sandbox != $SANDBOX_HOME* ]]
}

detect_sandbox() {
    local sub="${1:+/$1}"
    local sandbox
    if [[ "$SANDBOX_LOCAL" ]]; then
        sandbox="$(echo $SANDBOX_LOCAL$sub)"
        if check_path "$sandbox"; then
            echo "$sandbox"
            return 0
        fi
    else
        local cwd="${2:-$PWD}" tmp
        while true; do
            sandbox="$(echo $cwd/.cabal-sandbox$sub)"
            if check_path "$sandbox"; then
                echo "$sandbox"
                return 0
            fi
            tmp="$(dirname "$cwd")"
            if [[ $tmp = $cwd ]]; then
                break
            fi
            cwd="$tmp"
        done
    fi
    return "${ERRCODE}"
}

detect_package_db() {
    local -r sandbox="$(detect_sandbox '*packages.conf.d')"
    if [[ "$sandbox" ]]; then
        echo "-package-db=$sandbox"
    fi
}

register() {
    local -r sandbox="$(detect_sandbox bin)"
    if [[ ! "$sandbox" ]]; then
        _err "could not detect \`.cabal-sandbox' directory or executables"
        return "${ERRCODE}"
    fi
    mkdir -p "$SANDBOX_HOME/bin"
    local dest name
    for dest in "$sandbox"/*; do
        name="$(basename "$dest")"
        dest="$SANDBOX_HOME/bin/$name"
        if [[ ! -f "$dest" ]]; then
            ln -s "$LAUNCHER" "$dest"
            _msg "register $name"
        fi
    done
    return 0
}

execute() {
    local -r sandbox="$(detect_sandbox bin)"
    local -r exename="$1"
    if [[ ! "$sandbox" ]]; then
        _err "could not detect \`.cabal-sandbox' directory"
        return "${ERRCODE}"
    fi
    local -r exepath="$sandbox/$exename"
    if [[ ! -x "$exepath" ]]; then
        _err "command not found: $exename (on $sandbox)"
        return "${ERRCODE}"
    fi
    shift
    exec "$exepath" "$@"
}

_main() {
    if [[ $COMMAND = $LAUNCHER ]]; then
        local -a args=("" "$@")
        local -i i
        local opt optarg
        for (( i=1; i<=$#; i++ )); do
            opt="${args[$i]}" 
            case "$opt" in
                -h|--help)
                    usage
                    exit 0
                    ;;
                --sandbox|--sandbox=*)
                    if [[ "$opt" = --sandbox=* ]]; then
                        optarg="${opt#--sandbox=}"
                    else
                        i=$i+1
                        optarg="${args[$i]}" 
                    fi
                    SANDBOX_LOCAL="$(cd "$optarg" 2>/dev/null && pwd)"
                    ;;
                --)
                    shift $i
                    execute "$@"
                    exit "${ERRCODE}"
                    ;;
                detect)
                    detect_sandbox
                    exit $?
                    ;;
                package-db)
                    detect_package_db
                    exit $?
                    ;;
                register)
                    SANDBOX_LOCAL="${SANDBOX_LOCAL:-$PWD/.cabal-sandbox}"
                    register
                    exit $?
                    ;;
                *)
                    _err "invalid option: $opt"
                    usage
                    exit 1
                    ;;
            esac
        done
    else
        execute "$COMMAND" "$@"
    fi
}

_main "$@"
