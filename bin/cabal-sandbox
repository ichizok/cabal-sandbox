#!/usr/bin/env bash

declare GHC_VERSION
declare SANDBOX_LOCAL
declare SANDBOX_HOME

declare -r LAUNCHER=${LAUNCHER:-cabal-sandbox}
declare -r COMMAND=${0##*/}

_msg() {
    echo "${LAUNCHER}: $@"
}

_err() {
    echo "${LAUNCHER}: $@" >&2
}

usage() {
    cat <<EOT >&2
Usage: ${COMMAND} [--sandbox dir] detect|register
   or: ${COMMAND} [--sandbox dir] -- command [...]
EOT
}

ghc_version() {
    type ghc >/dev/null 2>&1 || return 1
    ghc --version | sed 's/^.* version //'
}

sandbox_home() {
    local fp
    [[ "$0" =~ / ]] && fp=$0 || fp=$(which "$0")
    fp=$(cd "${fp%/*}" && pwd); echo "${fp%/*}"
}

check_path() {
    local sandbox=$1
    [[ -d "${sandbox}" ]] && [[ ! ${sandbox} =~ ^${SANDBOX_HOME} ]]
}

find_sandbox_config() {
    local -r sbconf=cabal.sandbox.config
    local cwd=${2:-${PWD}}
    local tmp=${cwd}
    while [[ ! -f "${cwd}/${sbconf}" ]]; do
        tmp=${cwd%/*}
        [[ "${tmp}" = "${cwd}" ]] && return 1
        cwd=${tmp}
    done
    echo "${cwd}/${sbconf}"
}

detect_sandbox() {
    local sandbox
    if [[ "${SANDBOX_LOCAL}" ]]; then
        sandbox=${SANDBOX_LOCAL}
    else
        local -r sbconf=$(find_sandbox_config)
        if [[ ! "${sbconf}" ]]; then
            _err 'could not find sandbox config'
            return 1
        fi
        while read; do
            if [[ "${REPLY}" =~ ^\ *prefix: ]]; then
                sandbox=$(echo "${REPLY}" | sed 's/^\ *prefix:\ *//')
            fi
        done <"${sbconf}"
    fi
    if ! check_path "${sandbox}"; then
        _err 'could not detect sandbox directory'
        return 1
    fi
    echo "${sandbox}"
}

detect_sandbox_bindir() {
    local -r sandbox=$(detect_sandbox)
    if [[ ! "${sandbox}" ]]; then
        return 1
    fi
    local -r bindir=${sandbox}/bin
    if [[ ! -d "${bindir}" ]]; then
        _err 'could not detect executable in sandbox'
        return 1
    fi
    echo "${bindir}"
}

detect_sandbox_package_db() {
    local -r sandbox=$(detect_sandbox)
    if [[ ! "${sandbox}" ]]; then
        return 1
    fi
    local -r package_db=$(echo ${sandbox}/$(uname -i)-*-ghc-${GHC_VERSION}-packages.conf.d)
    if [[ ! -d "${package_db}" ]]; then
        _err 'could not detect package-db in sandbox'
        return 1
    fi
    echo "${package_db}"
}

register() {
    local -r sandbox=$(detect_sandbox_bindir)
    if [[ ! "${sandbox}" ]]; then
        return 1
    fi
    mkdir -p "${SANDBOX_HOME}/bin"
    local dest name
    for dest in "${sandbox}"/*; do
        name=${dest##*/}
        dest=${SANDBOX_HOME}/bin/${name}
        if [[ ! -f "${dest}" ]]; then
            ln -s "${LAUNCHER}" "${dest}"
            _msg "register ${name}"
        fi
    done
    return 0
}

execute() {
    local -r sandbox=$(detect_sandbox_bindir)
    local -r exename=$1
    if [[ ! "${sandbox}" ]]; then
        return 1
    fi
    local -r exepath=${sandbox}/${exename}
    if [[ ! -x "${exepath}" ]]; then
        _err "command not found: ${exename} (on ${sandbox})"
        return 127
    fi
    shift
    exec "${exepath}" "$@"
}

_main() {
    : ${GHC_VERSION:=$(ghc_version)}
    if [[ ! "${GHC_VERSION}" ]]; then
        _err "could not detect ghc version"
        exit 1
    fi

    : ${SANDBOX_HOME:=$(sandbox_home)}
    if [[ ! "${SANDBOX_HOME}" ]]; then
        _err "could not resolve SANDBOX_HOME"
        exit 1
    fi

    if [[ "${COMMAND}" = "${LAUNCHER}" ]]; then
        local -a args=("" "$@")
        local -i i
        local opt optarg
        for (( i=1; i<=$#; i++ )); do
            opt=${args[$i]} 
            case "${opt}" in
                -h|--help)
                    usage
                    exit 0
                    ;;
                --sandbox|--sandbox=*)
                    if [[ "${opt}" = --sandbox=* ]]; then
                        optarg=${opt#--sandbox=}
                    else
                        i=$i+1
                        optarg=${args[$i]} 
                    fi
                    SANDBOX_LOCAL=$(cd "${optarg}" && pwd)
                    ;;
                --)
                    shift $i
                    execute "$@"
                    exit $?
                    ;;
                detect)
                    detect_sandbox
                    exit $?
                    ;;
                package-db)
                    detect_sandbox_package_db
                    exit $?
                    ;;
                register)
                    register
                    exit $?
                    ;;
                *)
                    _err "invalid option: ${opt}"
                    usage
                    exit 1
                    ;;
            esac
        done
    else
        execute "${COMMAND}" "$@"
    fi
}

_main "$@"
